
This pair of blogs contains the complete story for accessing a website stored in
S3 and fronted by AWS CloudFront.

  https://john.soban.ski/how-to-configure-s3-websites-to-use-https-part-1.html
  https://john.soban.ski/how-to-configure-s3-websites-to-use-https-part-2.html

One trick is to do everything in AWS, including using the AWS name servers
(Route 53) for the domain. That makes it easy to create a certificate, because
the fact that you are logged into AWS is proof for AWS that you control 
that domain. So no challenge is involved in getting the certificate.

The other issue is that certificates must be obtained by using the AWS
certificate manager at US-east-1. It will not work for US-west-1.
Until there exists a certificate in US-east-1, the "custom certificate"
check box in the CloudFront configuration (which is what you need to use) 
is grayed out.

Some of the complexity arises from the fact the we need to map both the www URL
and the "naked" domain URL (requiring duplication of effor to create S3 buckets, 
and to create CloudFront distributions). The reason both are needed is that 
AWS uses the domain part of the URL to map to a bucket with the same name.
While both buckets are needed, one is configured to be redirected to the other.

Another source of complexity is that both http and https must be
mapped, but for security http needs to always be redirected to https. 

To make sure all that works properly, there are tens of steps that need to be
followed in succession, making sure that they are consistent with each other,
and some steps require time (up to 30 minutes) to get validated and for
configurations to be deployed. 

Make sure in the distribution creation you use the *web hosting URL* of the
corresponding S3 bucket and NOT the S3 bucket URL.

Terraform Scripting

TODO. Script the CloudFront + S3 provisioning process to the extent possible.

Some Details

- When adding the A record for the naked CloudFrontDistribution to the domain in
  Route 53, I did not see the naked distribution in the drop down. I had to
  copy and paste the URL of that distribition manually.

- AWS URLs sometimes have a dot at the end. Don't let that bother you.
  I guess externally the dots can be ignored or removed.

Certificate Challenges

In order to get an SSL certificate for https one needs to answer a challenge to
prove to the certificate provider that one controles the domain. You cannot 
set up a CloudFront distribution without a certificate.

There are three types of challenges that I know of: email, file update, and DNS. 

If the site has a working email configured, an email challenge can be used.
Mine did not.

A file challenge requires that the domain admin add a special file to the site
which it can then validate. But then its validation needs access to the site.
Catch 22.

In a DNS challenge, additional CNAME records are generated by the certificate
provider to be added by the admin to the domain. Then the provider can examine
those records to verify the requester has control of the domain. With my site
using GoDaddy name servers, unfortunately, the CNAMES had not propagated
even after 18 hours and I gave up. 

What worked was to transfer name service for my domain from GoDaddy to AWS. This
involves copying the AWS name servers and changing the domain's name servers in
GoDaddy to the AWS ones. Then the AWS certificate manager does not need to
challenge the requester directly. Since the requester is already logged in to
AWS, and has control over the domain, AWS can automatically add the challenge
CNAMEs to the domain. That considerably simplifies the process.

Deployment

    deploy2-s3.sh bucket-name

Bucket Policy

To set the required bucket policy for the S3 buckets. 

    cp bucket-policy.json.template bucket-policy.json
    # edit bucket-policy.json replace {bucketName} with your bucket name.
    set-bucket-policy.sh bucket-name

  bucket-policy.json gives GET access to AWS on all objects in the bucket.

Links

- Redirect checker: http://www.redirect-checker.org/index.php

- DNS checker: https://dnschecker.org/#A/eagerwords.com

Competition to CloudFront + S3

- Chose S3 over using github pages for static UI site. Cloudfront + S3 is a more
  general and more robust solution. Github pages allows a single installation
  for the static content. We may need multiple ones - for different
  environments and versions of the app.

Pricing

Looks like first year is free within limits. After that 8.5 cents per 10 TB for each 
of US+Canada, and Europe+Israel, and decreasing with additional TBs.

https://aws.amazon.com/cloudfront/pricing/

